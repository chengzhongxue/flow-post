/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { FollowList } from '../models';
// @ts-ignore
import type { SubmitFollowRequest } from '../models';
/**
 * ApiFlowPostKunkunyuComV1alpha1FollowApi - axios parameter creator
 * @export
 */
export const ApiFlowPostKunkunyuComV1alpha1FollowApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 取消订阅
         * @param {string} name 
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFollow: async (name: string, token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('cancelFollow', 'name', name)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('cancelFollow', 'token', token)
            const localVarPath = `/apis/api.flow.post.kunkunyu.com/v1alpha1/follows/{name}/cancel`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 订阅
         * @param {string} name 
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmFollow: async (name: string, token: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('confirmFollow', 'name', name)
            // verify required parameter 'token' is not null or undefined
            assertParamExists('confirmFollow', 'token', token)
            const localVarPath = `/apis/api.flow.post.kunkunyu.com/v1alpha1/follows/{name}/confirm`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (token !== undefined) {
                localVarQueryParameter['token'] = token;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 分页查询订阅列表
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] Follow filtered by keyword.
         * @param {string} [status] Follow status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollows: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, status?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/api.flow.post.kunkunyu.com/v1alpha1/follows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }

            if (keyword !== undefined) {
                localVarQueryParameter['keyword'] = keyword;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 提交订阅
         * @param {SubmitFollowRequest} submitFollowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitFollow: async (submitFollowRequest: SubmitFollowRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'submitFollowRequest' is not null or undefined
            assertParamExists('submitFollow', 'submitFollowRequest', submitFollowRequest)
            const localVarPath = `/apis/api.flow.post.kunkunyu.com/v1alpha1/follows/-/submit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(submitFollowRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiFlowPostKunkunyuComV1alpha1FollowApi - functional programming interface
 * @export
 */
export const ApiFlowPostKunkunyuComV1alpha1FollowApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiFlowPostKunkunyuComV1alpha1FollowApiAxiosParamCreator(configuration)
    return {
        /**
         * 取消订阅
         * @param {string} name 
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelFollow(name: string, token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelFollow(name, token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiFlowPostKunkunyuComV1alpha1FollowApi.cancelFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 订阅
         * @param {string} name 
         * @param {string} token token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmFollow(name: string, token: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmFollow(name, token, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiFlowPostKunkunyuComV1alpha1FollowApi.confirmFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 分页查询订阅列表
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {string} [keyword] Follow filtered by keyword.
         * @param {string} [status] Follow status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFollows(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, keyword?: string, status?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFollows(page, size, labelSelector, fieldSelector, sort, keyword, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiFlowPostKunkunyuComV1alpha1FollowApi.listFollows']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 提交订阅
         * @param {SubmitFollowRequest} submitFollowRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitFollow(submitFollowRequest: SubmitFollowRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitFollow(submitFollowRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ApiFlowPostKunkunyuComV1alpha1FollowApi.submitFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ApiFlowPostKunkunyuComV1alpha1FollowApi - factory interface
 * @export
 */
export const ApiFlowPostKunkunyuComV1alpha1FollowApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiFlowPostKunkunyuComV1alpha1FollowApiFp(configuration)
    return {
        /**
         * 取消订阅
         * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFollow(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cancelFollow(requestParameters.name, requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * 订阅
         * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmFollow(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.confirmFollow(requestParameters.name, requestParameters.token, options).then((request) => request(axios, basePath));
        },
        /**
         * 分页查询订阅列表
         * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiListFollowsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollows(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiListFollowsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FollowList> {
            return localVarFp.listFollows(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.status, options).then((request) => request(axios, basePath));
        },
        /**
         * 提交订阅
         * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiSubmitFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitFollow(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiSubmitFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.submitFollow(requestParameters.submitFollowRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelFollow operation in ApiFlowPostKunkunyuComV1alpha1FollowApi.
 * @export
 * @interface ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollowRequest
 */
export interface ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollowRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollow
     */
    readonly name: string

    /**
     * token
     * @type {string}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollow
     */
    readonly token: string
}

/**
 * Request parameters for confirmFollow operation in ApiFlowPostKunkunyuComV1alpha1FollowApi.
 * @export
 * @interface ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollowRequest
 */
export interface ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollowRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollow
     */
    readonly name: string

    /**
     * token
     * @type {string}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollow
     */
    readonly token: string
}

/**
 * Request parameters for listFollows operation in ApiFlowPostKunkunyuComV1alpha1FollowApi.
 * @export
 * @interface ApiFlowPostKunkunyuComV1alpha1FollowApiListFollowsRequest
 */
export interface ApiFlowPostKunkunyuComV1alpha1FollowApiListFollowsRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiListFollows
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiListFollows
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiListFollows
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiListFollows
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiListFollows
     */
    readonly sort?: Array<string>

    /**
     * Follow filtered by keyword.
     * @type {string}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiListFollows
     */
    readonly keyword?: string

    /**
     * Follow status.
     * @type {string}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiListFollows
     */
    readonly status?: string
}

/**
 * Request parameters for submitFollow operation in ApiFlowPostKunkunyuComV1alpha1FollowApi.
 * @export
 * @interface ApiFlowPostKunkunyuComV1alpha1FollowApiSubmitFollowRequest
 */
export interface ApiFlowPostKunkunyuComV1alpha1FollowApiSubmitFollowRequest {
    /**
     * 
     * @type {SubmitFollowRequest}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApiSubmitFollow
     */
    readonly submitFollowRequest: SubmitFollowRequest
}

/**
 * ApiFlowPostKunkunyuComV1alpha1FollowApi - object-oriented interface
 * @export
 * @class ApiFlowPostKunkunyuComV1alpha1FollowApi
 * @extends {BaseAPI}
 */
export class ApiFlowPostKunkunyuComV1alpha1FollowApi extends BaseAPI {
    /**
     * 取消订阅
     * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApi
     */
    public cancelFollow(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiCancelFollowRequest, options?: RawAxiosRequestConfig) {
        return ApiFlowPostKunkunyuComV1alpha1FollowApiFp(this.configuration).cancelFollow(requestParameters.name, requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 订阅
     * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApi
     */
    public confirmFollow(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiConfirmFollowRequest, options?: RawAxiosRequestConfig) {
        return ApiFlowPostKunkunyuComV1alpha1FollowApiFp(this.configuration).confirmFollow(requestParameters.name, requestParameters.token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 分页查询订阅列表
     * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiListFollowsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApi
     */
    public listFollows(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiListFollowsRequest = {}, options?: RawAxiosRequestConfig) {
        return ApiFlowPostKunkunyuComV1alpha1FollowApiFp(this.configuration).listFollows(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, requestParameters.keyword, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 提交订阅
     * @param {ApiFlowPostKunkunyuComV1alpha1FollowApiSubmitFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiFlowPostKunkunyuComV1alpha1FollowApi
     */
    public submitFollow(requestParameters: ApiFlowPostKunkunyuComV1alpha1FollowApiSubmitFollowRequest, options?: RawAxiosRequestConfig) {
        return ApiFlowPostKunkunyuComV1alpha1FollowApiFp(this.configuration).submitFollow(requestParameters.submitFollowRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

