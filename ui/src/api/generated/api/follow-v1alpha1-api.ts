/* tslint:disable */
/* eslint-disable */
/**
 * Halo
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.20.11
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Follow } from '../models';
// @ts-ignore
import type { FollowList } from '../models';
// @ts-ignore
import type { JsonPatchInner } from '../models';
/**
 * FollowV1alpha1Api - axios parameter creator
 * @export
 */
export const FollowV1alpha1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create Follow
         * @param {Follow} [follow] Fresh follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFollow: async (follow?: Follow, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/flow.post.kunkunyu.com/v1alpha1/follows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(follow, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete Follow
         * @param {string} name Name of follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollow: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('deleteFollow', 'name', name)
            const localVarPath = `/apis/flow.post.kunkunyu.com/v1alpha1/follows/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Follow
         * @param {string} name Name of follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollow: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getFollow', 'name', name)
            const localVarPath = `/apis/flow.post.kunkunyu.com/v1alpha1/follows/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Follow
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollow: async (page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/apis/flow.post.kunkunyu.com/v1alpha1/follows`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (labelSelector) {
                localVarQueryParameter['labelSelector'] = labelSelector;
            }

            if (fieldSelector) {
                localVarQueryParameter['fieldSelector'] = fieldSelector;
            }

            if (sort) {
                localVarQueryParameter['sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Patch Follow
         * @param {string} name Name of follow
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFollow: async (name: string, jsonPatchInner?: Array<JsonPatchInner>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('patchFollow', 'name', name)
            const localVarPath = `/apis/flow.post.kunkunyu.com/v1alpha1/follows/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json-patch+json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jsonPatchInner, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update Follow
         * @param {string} name Name of follow
         * @param {Follow} [follow] Updated follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFollow: async (name: string, follow?: Follow, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('updateFollow', 'name', name)
            const localVarPath = `/apis/flow.post.kunkunyu.com/v1alpha1/follows/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication basicAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(follow, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FollowV1alpha1Api - functional programming interface
 * @export
 */
export const FollowV1alpha1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FollowV1alpha1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Create Follow
         * @param {Follow} [follow] Fresh follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFollow(follow?: Follow, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Follow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFollow(follow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowV1alpha1Api.createFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete Follow
         * @param {string} name Name of follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFollow(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteFollow(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowV1alpha1Api.deleteFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get Follow
         * @param {string} name Name of follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFollow(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Follow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFollow(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowV1alpha1Api.getFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * List Follow
         * @param {number} [page] Page number. Default is 0.
         * @param {number} [size] Size number. Default is 0.
         * @param {Array<string>} [labelSelector] Label selector. e.g.: hidden!&#x3D;true
         * @param {Array<string>} [fieldSelector] Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
         * @param {Array<string>} [sort] Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFollow(page?: number, size?: number, labelSelector?: Array<string>, fieldSelector?: Array<string>, sort?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FollowList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listFollow(page, size, labelSelector, fieldSelector, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowV1alpha1Api.listFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Patch Follow
         * @param {string} name Name of follow
         * @param {Array<JsonPatchInner>} [jsonPatchInner] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchFollow(name: string, jsonPatchInner?: Array<JsonPatchInner>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Follow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchFollow(name, jsonPatchInner, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowV1alpha1Api.patchFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update Follow
         * @param {string} name Name of follow
         * @param {Follow} [follow] Updated follow
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFollow(name: string, follow?: Follow, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Follow>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFollow(name, follow, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['FollowV1alpha1Api.updateFollow']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * FollowV1alpha1Api - factory interface
 * @export
 */
export const FollowV1alpha1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FollowV1alpha1ApiFp(configuration)
    return {
        /**
         * Create Follow
         * @param {FollowV1alpha1ApiCreateFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFollow(requestParameters: FollowV1alpha1ApiCreateFollowRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Follow> {
            return localVarFp.createFollow(requestParameters.follow, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete Follow
         * @param {FollowV1alpha1ApiDeleteFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFollow(requestParameters: FollowV1alpha1ApiDeleteFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteFollow(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Follow
         * @param {FollowV1alpha1ApiGetFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFollow(requestParameters: FollowV1alpha1ApiGetFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<Follow> {
            return localVarFp.getFollow(requestParameters.name, options).then((request) => request(axios, basePath));
        },
        /**
         * List Follow
         * @param {FollowV1alpha1ApiListFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFollow(requestParameters: FollowV1alpha1ApiListFollowRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<FollowList> {
            return localVarFp.listFollow(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(axios, basePath));
        },
        /**
         * Patch Follow
         * @param {FollowV1alpha1ApiPatchFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchFollow(requestParameters: FollowV1alpha1ApiPatchFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<Follow> {
            return localVarFp.patchFollow(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(axios, basePath));
        },
        /**
         * Update Follow
         * @param {FollowV1alpha1ApiUpdateFollowRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFollow(requestParameters: FollowV1alpha1ApiUpdateFollowRequest, options?: RawAxiosRequestConfig): AxiosPromise<Follow> {
            return localVarFp.updateFollow(requestParameters.name, requestParameters.follow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createFollow operation in FollowV1alpha1Api.
 * @export
 * @interface FollowV1alpha1ApiCreateFollowRequest
 */
export interface FollowV1alpha1ApiCreateFollowRequest {
    /**
     * Fresh follow
     * @type {Follow}
     * @memberof FollowV1alpha1ApiCreateFollow
     */
    readonly follow?: Follow
}

/**
 * Request parameters for deleteFollow operation in FollowV1alpha1Api.
 * @export
 * @interface FollowV1alpha1ApiDeleteFollowRequest
 */
export interface FollowV1alpha1ApiDeleteFollowRequest {
    /**
     * Name of follow
     * @type {string}
     * @memberof FollowV1alpha1ApiDeleteFollow
     */
    readonly name: string
}

/**
 * Request parameters for getFollow operation in FollowV1alpha1Api.
 * @export
 * @interface FollowV1alpha1ApiGetFollowRequest
 */
export interface FollowV1alpha1ApiGetFollowRequest {
    /**
     * Name of follow
     * @type {string}
     * @memberof FollowV1alpha1ApiGetFollow
     */
    readonly name: string
}

/**
 * Request parameters for listFollow operation in FollowV1alpha1Api.
 * @export
 * @interface FollowV1alpha1ApiListFollowRequest
 */
export interface FollowV1alpha1ApiListFollowRequest {
    /**
     * Page number. Default is 0.
     * @type {number}
     * @memberof FollowV1alpha1ApiListFollow
     */
    readonly page?: number

    /**
     * Size number. Default is 0.
     * @type {number}
     * @memberof FollowV1alpha1ApiListFollow
     */
    readonly size?: number

    /**
     * Label selector. e.g.: hidden!&#x3D;true
     * @type {Array<string>}
     * @memberof FollowV1alpha1ApiListFollow
     */
    readonly labelSelector?: Array<string>

    /**
     * Field selector. e.g.: metadata.name&#x3D;&#x3D;halo
     * @type {Array<string>}
     * @memberof FollowV1alpha1ApiListFollow
     */
    readonly fieldSelector?: Array<string>

    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @type {Array<string>}
     * @memberof FollowV1alpha1ApiListFollow
     */
    readonly sort?: Array<string>
}

/**
 * Request parameters for patchFollow operation in FollowV1alpha1Api.
 * @export
 * @interface FollowV1alpha1ApiPatchFollowRequest
 */
export interface FollowV1alpha1ApiPatchFollowRequest {
    /**
     * Name of follow
     * @type {string}
     * @memberof FollowV1alpha1ApiPatchFollow
     */
    readonly name: string

    /**
     * 
     * @type {Array<JsonPatchInner>}
     * @memberof FollowV1alpha1ApiPatchFollow
     */
    readonly jsonPatchInner?: Array<JsonPatchInner>
}

/**
 * Request parameters for updateFollow operation in FollowV1alpha1Api.
 * @export
 * @interface FollowV1alpha1ApiUpdateFollowRequest
 */
export interface FollowV1alpha1ApiUpdateFollowRequest {
    /**
     * Name of follow
     * @type {string}
     * @memberof FollowV1alpha1ApiUpdateFollow
     */
    readonly name: string

    /**
     * Updated follow
     * @type {Follow}
     * @memberof FollowV1alpha1ApiUpdateFollow
     */
    readonly follow?: Follow
}

/**
 * FollowV1alpha1Api - object-oriented interface
 * @export
 * @class FollowV1alpha1Api
 * @extends {BaseAPI}
 */
export class FollowV1alpha1Api extends BaseAPI {
    /**
     * Create Follow
     * @param {FollowV1alpha1ApiCreateFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowV1alpha1Api
     */
    public createFollow(requestParameters: FollowV1alpha1ApiCreateFollowRequest = {}, options?: RawAxiosRequestConfig) {
        return FollowV1alpha1ApiFp(this.configuration).createFollow(requestParameters.follow, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete Follow
     * @param {FollowV1alpha1ApiDeleteFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowV1alpha1Api
     */
    public deleteFollow(requestParameters: FollowV1alpha1ApiDeleteFollowRequest, options?: RawAxiosRequestConfig) {
        return FollowV1alpha1ApiFp(this.configuration).deleteFollow(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get Follow
     * @param {FollowV1alpha1ApiGetFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowV1alpha1Api
     */
    public getFollow(requestParameters: FollowV1alpha1ApiGetFollowRequest, options?: RawAxiosRequestConfig) {
        return FollowV1alpha1ApiFp(this.configuration).getFollow(requestParameters.name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Follow
     * @param {FollowV1alpha1ApiListFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowV1alpha1Api
     */
    public listFollow(requestParameters: FollowV1alpha1ApiListFollowRequest = {}, options?: RawAxiosRequestConfig) {
        return FollowV1alpha1ApiFp(this.configuration).listFollow(requestParameters.page, requestParameters.size, requestParameters.labelSelector, requestParameters.fieldSelector, requestParameters.sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Patch Follow
     * @param {FollowV1alpha1ApiPatchFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowV1alpha1Api
     */
    public patchFollow(requestParameters: FollowV1alpha1ApiPatchFollowRequest, options?: RawAxiosRequestConfig) {
        return FollowV1alpha1ApiFp(this.configuration).patchFollow(requestParameters.name, requestParameters.jsonPatchInner, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update Follow
     * @param {FollowV1alpha1ApiUpdateFollowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FollowV1alpha1Api
     */
    public updateFollow(requestParameters: FollowV1alpha1ApiUpdateFollowRequest, options?: RawAxiosRequestConfig) {
        return FollowV1alpha1ApiFp(this.configuration).updateFollow(requestParameters.name, requestParameters.follow, options).then((request) => request(this.axios, this.basePath));
    }
}

